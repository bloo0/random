name: hello service

on:
  push:
    branches: [ master ]
    paths:
      - 'app/hello/**'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - uses: act10ns/slack@v1
        with:
          status: starting - ${{ github.run_id }}
          channel: '#pipe-notification'
        if: always()

      - name: Checkout code
        id: checkout-code
        uses: actions/checkout@v2

      - uses: chrnorm/deployment-action@v2
        name: Initialize Job
        id: init-job
        with:
          token: '${{ github.token }}'
          ref: '${{ github.head_ref }}'
          environment: dev

      - name: Configure kubectl
        id: conf-kubectl
        run: |
          /usr/bin/curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/arm64/kubectl"
          chmod +x ./kubectl
          mv ./kubectl /usr/local/bin/kubectl
      
      - name: Configure AWS Credentials
        id: conf-aws-creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1
      
      - name: Amazon ECR login
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: DockerHub login
        id: dockerhub-login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Build and Deploy
        id: build-deploy
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: hello
          IMAGE_TAG: ${{ github.run_id }}-${{ github.run_attempt }}
          AWS_DEFAULT_REGION: ap-southeast-1
          K8S_CLUSTER_NAME: prd-cluster
          NAMESPACE: prd
        run: |
          cd app/hello
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          /usr/local/bin/aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $K8S_CLUSTER_NAME
          /usr/local/bin/kubectl set image deployment/hello hello=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --record -n $NAMESPACE

      - name: Update job status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          state: 'success'
          deployment-id: ${{ steps.init-job.outputs.deployment_id }}

      - name: Update job status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          state: 'failure'
          deployment-id: ${{ steps.init-job.outputs.deployment_id }}

      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#internal-pipe-notification'
        if: always()
